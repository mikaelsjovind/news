#!/usr/bin/env python3
"""
Analyzer Agent - Autonomous article analysis agent.

This agent analyzes unread articles, generates summaries, assigns relevance scores,
and performs deep analysis for configured sources. Runs every 30 minutes via scheduler.

No base classes, no inheritance - just straightforward code.

Uses Claude Agent SDK which requires:
- Local Claude Code CLI (for tooling/MCP)
- Anthropic API key and credits (for LLM inference)
"""

import asyncio
import os

from claude_agent_sdk import (
    AssistantMessage,
    ClaudeAgentOptions,
    ClaudeSDKClient,
    TextBlock,
    create_sdk_mcp_server,
    tool,
)
from rich.console import Console

from agents.mcp_tools import TOOLS
from core.database import Database
from core.profile_manager import ProfileManager

console = Console()

# Tools available for analyzer agent (7 tools - minimal write access)
ANALYZER_TOOLS = [
    'get_articles',
    'get_article',
    'get_profile',
    'get_stats',
    'save_article_analysis',  # PRIMARY tool for saving analysis
    'trigger_deep_analysis',
    'save_deep_analysis'
]


def create_mcp_server():
    """Create MCP server with analyzer tools."""
    sdk_tools = []

    for tool_name in ANALYZER_TOOLS:
        tool_info = TOOLS[tool_name]

        def make_tool_wrapper(name, func, desc, params):
            input_schema = params if params else {}

            @tool(name, desc, input_schema)
            async def wrapper(args):
                console.print(f"[dim]üîß {name}[/dim]")
                result = func(args)
                import json
                result_json = json.dumps(result, ensure_ascii=False, indent=2)
                return {
                    "content": [
                        {"type": "text", "text": result_json}
                    ]
                }
            return wrapper

        sdk_tools.append(make_tool_wrapper(
            tool_name,
            tool_info['function'],
            tool_info['description'],
            tool_info['parameters']
        ))

    return create_sdk_mcp_server(
        name="news_tools",
        version="1.0.0",
        tools=sdk_tools
    )


def get_system_prompt(profile: ProfileManager) -> str:
    """Get system prompt for analyzer agent."""
    profile_data = profile.get_profile()
    top_topics = profile.get_top_topics(5)
    topics_str = ", ".join([f"{topic} ({weight:.1f})" for topic, weight in top_topics])

    return f"""Du √§r en autonom artikel-analysagent.

ANV√ÑNDARENS PROFIL:
- Huvudintressen: {topics_str}
- Antal √§mnen i profil: {len(profile_data)}

DIN UPPGIFT:
Analysera ALLA ol√§sta artiklar i systemet. Detta √§r en autonom bakgrundsuppgift.

VIKTIGA VERKTYG:
- get_articles: H√§mta artiklar f√∂r analys
- get_article: H√§mta fullst√§ndig artikel f√∂r djupanalys
- get_profile: H√§mta anv√§ndarprofil
- get_stats: H√§mta statistik
- save_article_analysis: Spara sammanfattning + relevanspo√§ng (PRIM√ÑRT VERKTYG!)
- trigger_deep_analysis: H√§mta djupanalysprompt (steg 1/2)
- save_deep_analysis: Spara djupanalysresultat (steg 2/2)

ANALYSPROCESS:
1. Anv√§nd get_articles(read_status='unread', limit=1000) f√∂r att h√§mta ALLA ol√§sta artiklar
2. F√∂r VARJE artikel:
   - Analysera f√∂r relevans (0.0-1.0) baserat p√• anv√§ndarprofil
   - Skapa koncis svensk sammanfattning (2-3 meningar)
   - SPARA med save_article_analysis(article_id, summary, relevance_score)
3. F√∂r artiklar fr√•n k√§llor med deep_analysis=true (t.ex. Cornucopia):
   - Anropa trigger_deep_analysis(article_id) ‚Üí f√• prompt
   - Exekvera prompten (skapa djupanalys)
   - Anropa save_deep_analysis(article_id, analysis_text) ‚Üí spara

VIKTIGT:
- Detta √§r en AUTONOM uppgift - ingen anv√§ndarinteraktion
- Analysera ALLA artiklar, hoppa inte √∂ver n√•gra
- Var effektiv men noggrann
- Rapportera kort vad du gjorde n√§r du √§r klar
- Anv√§nd svenska i alla analyser

N√§r du √§r klar, ge en kort sammanfattning:
"Analyserade X artiklar: Y h√∂grelevanta, Z medelrelevanta, W l√•grelevanta. Djupanalyserade N artiklar."
"""


async def run_analysis():
    """Run autonomous analysis."""
    db = Database()
    profile = ProfileManager(db=db)

    console.print("[bold blue]Starting autonomous analysis...[/bold blue]")

    # Load model from config
    import json
    try:
        with open('config.json', 'r', encoding='utf-8') as f:
            config = json.load(f)
        model = config.get('claude_model', 'claude-haiku-4-5-20251001')
    except (FileNotFoundError, json.JSONDecodeError):
        model = 'claude-haiku-4-5-20251001'  # Default fallback

    # Create MCP server
    mcp_server = create_mcp_server()
    console.print(f"[green]‚úì[/green] Loaded {len(ANALYZER_TOOLS)} tools")

    # Setup options
    allowed_tools = [f"mcp__news_tools__{tool_name}" for tool_name in ANALYZER_TOOLS]

    # NVM-specific configuration
    subprocess_env = os.environ.copy()
    subprocess_env["PATH"] = f"/Users/mikaelsjovind/.nvm/versions/node/v22.15.1/bin:{subprocess_env.get('PATH', '')}"

    options = ClaudeAgentOptions(
        mcp_servers={"news_tools": mcp_server},
        allowed_tools=allowed_tools,
        system_prompt=get_system_prompt(profile),
        permission_mode='bypassPermissions',
        cli_path="/Users/mikaelsjovind/.nvm/versions/node/v22.15.1/bin/claude",
        env=subprocess_env,
        model=model
    )

    # Create client and run analysis
    async with ClaudeSDKClient(options=options) as client:
        # Send analysis task
        analysis_task = """Analysera alla ol√§sta artiklar i systemet.

STEG-F√ñR-STEG:
1. H√§mta alla ol√§sta artiklar med get_articles(read_status='unread', limit=1000)
2. F√∂r varje artikel:
   - Bed√∂m relevans (0.0-1.0) baserat p√• anv√§ndarprofil
   - Skapa koncis svensk sammanfattning (2-3 meningar)
   - SPARA med save_article_analysis(article_id, summary, relevance_score)
3. Identifiera artiklar fr√•n k√§llor med deep_analysis=true
4. F√∂r dessa artiklar:
   - Anv√§nd trigger_deep_analysis(article_id) f√∂r att f√• prompt
   - Exekvera prompten och skapa djupanalys
   - Spara med save_deep_analysis(article_id, analysis_text)

KRITISKT: Du M√ÖSTE anv√§nda save_article_analysis() f√∂r att spara varje artikels sammanfattning och relevanspo√§ng!

N√§r du √§r klar, ge en sammanfattning av vad du gjorde.

B√ñRJA NU!"""

        await client.query(analysis_task)

        # Collect response
        response_text = []
        async for message in client.receive_response():
            if isinstance(message, AssistantMessage):
                for block in message.content:
                    if isinstance(block, TextBlock):
                        response_text.append(block.text)
                        console.print(f"[cyan]Agent:[/cyan] {block.text}")

        final_response = "\n".join(response_text)
        console.print("\n[green]‚úì[/green] Analysis complete!")
        return final_response


def main():
    """Main entry point."""
    try:
        result = asyncio.run(run_analysis())
        console.print(f"\n[green]Analysis complete:[/green]\n{result}")
    except KeyboardInterrupt:
        console.print("\n\n[yellow]Interrupted[/yellow]")
    except Exception as e:
        console.print(f"\n[red]Error: {e}[/red]")
        import traceback
        traceback.print_exc()


if __name__ == "__main__":
    main()
