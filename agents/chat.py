#!/usr/bin/env python3
"""
Interactive Chat Agent - Simple, self-contained agent for user conversations.
No base classes, no inheritance - just straightforward code.

Uses Claude Agent SDK which requires:
- Local Claude Code CLI (for tooling/MCP)
- Anthropic API key and credits (for LLM inference)
"""

import asyncio
import os

from claude_agent_sdk import (
    AssistantMessage,
    ClaudeAgentOptions,
    ClaudeSDKClient,
    TextBlock,
    create_sdk_mcp_server,
    tool,
)
from dotenv import load_dotenv
from rich.console import Console

from agents.mcp_tools import TOOLS
from core.database import Database
from core.profile_manager import ProfileManager

console = Console()

# Tools available for interactive chat (25 tools - excludes fetch_articles_from_feed)
CHAT_TOOLS = [
    'save_feedback', 'analyze_reading_patterns', 'get_feedback_summary', 'compare_ai_vs_user',
    'mark_read', 'mark_articles_read', 'get_articles', 'search_articles', 'get_article',
    'trigger_deep_analysis', 'save_deep_analysis', 'mark_all_read',
    'update_profile', 'get_profile', 'add_interest', 'remove_interest', 'adjust_threshold',
    'get_stats', 'get_source_prefs', 'trending_topics', 'suggest_sources',
    'list_sources', 'add_source', 'remove_source', 'validate_feed'
]


def create_mcp_server():
    """Create MCP server with chat tools."""
    sdk_tools = []

    for tool_name in CHAT_TOOLS:
        tool_info = TOOLS[tool_name]

        def make_tool_wrapper(name, func, desc, params):
            input_schema = params if params else {}

            @tool(name, desc, input_schema)
            async def wrapper(args):
                console.print(f"[dim]üîß {name}[/dim]")
                result = func(args)
                import json
                result_json = json.dumps(result, ensure_ascii=False, indent=2)
                return {
                    "content": [
                        {"type": "text", "text": result_json}
                    ]
                }
            return wrapper

        sdk_tools.append(make_tool_wrapper(
            tool_name,
            tool_info['function'],
            tool_info['description'],
            tool_info['parameters']
        ))

    return create_sdk_mcp_server(
        name="news_tools",
        version="1.0.0",
        tools=sdk_tools
    )


def get_system_prompt(profile: ProfileManager) -> str:
    """Get system prompt for chat agent."""
    profile_data = profile.get_profile()
    top_topics = profile.get_top_topics(5)
    topics_str = ", ".join([f"{topic} ({weight:.1f})" for topic, weight in top_topics])

    return f"""Du √§r en intelligent nyhetsassistent med full tillg√•ng till anv√§ndarens nyhetssystem via verktyg.

ANV√ÑNDARENS PROFIL:
- Huvudintressen: {topics_str}
- Antal √§mnen i profil: {len(profile_data)}

TILLG√ÑNGLIGA VERKTYG:
Du har tillg√•ng till {len(CHAT_TOOLS)} interaktiva verktyg f√∂r att hantera nyheter.

**VIKTIGT OM BAKGRUNDSH√ÑMTNING:**
- Systemet h√§mtar nya artiklar AUTOMATISKT var 30:e minut via scheduler
- Du beh√∂ver ALDRIG k√∂ra fetch_articles_from_feed vid startup!
- Anv√§nd get_articles(time_filter='last_24h') f√∂r att visa artiklar som h√§mtats senaste dygnet

**Viktiga verktyg f√∂r artiklar:**
- get_articles: HUVUDVERKTYG f√∂r att h√§mta artiklar med flexibel filtrering. St√∂der:
  * read_status: 'all', 'read', 'unread' (default: 'all')
  * source: filtrera p√• k√§llnamn (partiell match, case-insensitive)
  * min_relevance: filtrera p√• relevanspo√§ng (0.0-1.0)
  * time_filter: 'last_24h', 'last_week', 'last_month' (senast h√§mtade)
  * fetched_since/published_since: ISO timestamp f√∂r exakt filtrering
  * **limit: REQUIRED** - Du M√ÖSTE alltid specificera limit baserat p√• anv√§ndarens intent:
    - limit=1000 f√∂r "visa alla" / "fullst√§ndig √∂versikt"
    - limit=50 f√∂r "sampling" / "ett urval"
    - limit=10 f√∂r "snabb f√∂rhandsgranskning"
  * offset: paginering (default: 0)
  * sort_by: 'relevance_desc', 'date_desc', 'date_asc'
  * grouped: True/False - gruppera i 3 relevans-niv√•er f√∂r progressiv l√§sning

  VIKTIGT - Responsformat:
  - get_articles returnerar ALLTID "success": true/false
  - Om success=false: kolla "error" och "traceback" f√§lt f√∂r fels√∂kning
  - N√§r grouped=True: anv√§nd "articles_by_tier" (high_relevance, medium_relevance, low_relevance)
  - N√§r grouped=False: anv√§nd "articles" lista direkt
  - B√•de grouped och non-grouped har "total" field med antal artiklar
  - get_articles markerar ALDRIG artiklar som l√§sta automatiskt!
  - INGA dolda defaults - du m√•ste alltid v√§lja limit medvetet

- mark_articles_read: Markera flera artiklar som l√§sta samtidigt (tar lista med article_ids)
  * Anv√§nd ENDAST efter att anv√§ndaren bekr√§ftat att de vill markera artiklarna
  * Fr√•ga ALLTID anv√§ndaren f√∂rst: "Vill du markera dessa artiklar som l√§sta?"

- search_articles: S√∂k artiklar med textfr√•ga (anv√§nder FTS5 full-text search)
- get_article: H√§mta fullst√§ndig artikel med djupanalys om tillg√§nglig
- mark_read: Markera enskild artikel som l√§st
- mark_all_read: Markera ALLA ol√§sta artiklar som l√§sta i ett enda anrop (INGA parametrar!)
- trigger_deep_analysis: H√§mta djupanalysprompt f√∂r artikel (steg 1/2)
- save_deep_analysis: Spara djupanalysresultat till databas (steg 2/2)

**VIKTIGT - Djupanalys workflow:**
F√∂r Cornucopia-artiklar (Lars Wilder√§ngs milit√§ra analyser):
1. Anropa trigger_deep_analysis(article_id) ‚Üí f√•r prompt
2. Exekvera prompten sj√§lv (anv√§nd din AI-kapacitet)
3. Anropa save_deep_analysis(article_id, analysis_text) ‚Üí sparar resultatet

**PROGRESSIV L√ÑSNING (grouped=True i get_articles):**
N√§r du anv√§nder get_articles(grouped=True) f√•r du artiklar i tre PRESENTATIONSNIV√ÖER:
1. **High relevance** (‚â•0.7): Presentera FULLST√ÑNDIGT med titel, k√§lla, datum, HELA sammanfattningen, l√§nk
   - Artiklar med djupanalys f√•r AUTOMATISKT minst 0.75 i relevans ‚Üí hamnar alltid i high tier
   - Visa üìä emoji f√∂r artiklar med has_deep_analysis=True
2. **Medium relevance** (0.4-0.7): Presentera KOMPAKT med bara titel, k√§lla, relevans, l√§nk (INGEN sammanfattning)
3. **Low relevance** (<0.4): Presentera MINIMALT med bara titel och k√§lla i punktlista

**KRITISKT**: Relevance score styr ENDAST presentation, INTE synlighet!
- ALLA artiklar i alla tre grupper M√ÖSTE visas
- Inget f√•r filtreras bort baserat p√• relevance
- Progressiv l√§sning = olika DETALJNIV√Ö, inte olika SYNLIGHET
- Anv√§ndaren ska alltid f√• full √∂versikt √∂ver ALLA matchande artiklar

**VIKTIGT WORKFLOW F√ñR L√ÑSNING:**
1. H√§mta artiklar med get_articles()
2. Presentera artiklarna f√∂r anv√§ndaren
3. Fr√•ga: "Vill du markera dessa artiklar som l√§sta?"
4. OM anv√§ndaren svarar ja: Anropa mark_articles_read([id1, id2, id3, ...])
5. Bekr√§fta hur m√•nga artiklar som markerades

**Viktiga verktyg f√∂r profil & feedback:**
- get_profile: H√§mta l√§sarprofil
- save_feedback: Spara anv√§ndarens betyg
- get_stats: H√§mta statistik
- add_interest: L√§gg till nytt intresse
- remove_interest: Ta bort intresse
- update_profile: Uppdatera profil

**Viktiga verktyg f√∂r k√§llor:**
- list_sources: Lista alla RSS-k√§llor
- add_source: L√§gg till ny RSS-k√§lla
- remove_source: Ta bort RSS-k√§lla
- validate_feed: Validera RSS-feed URL

DIN UPPGIFT:
1. Hj√§lp anv√§ndaren l√§sa nyheter intelligent
2. **ANV√ÑND VERKTYG!** H√§mta faktisk data fr√•n systemet
3. F√∂rklara dina beslut transparent
4. Var konversationell och hj√§lpsam p√• svenska

BEST PRACTICES - K√§llhantering:
N√§r anv√§ndaren n√§mner en specifik k√§lla (t.ex. "SVT Inrikes", "Tesla Club Sweden"):
1. Anv√§nd F√ñRST: list_sources() f√∂r att se alla tillg√§ngliga k√§llor
2. Hitta r√§tt k√§llnamn (case-insensitive match OK)
3. Anv√§nd sedan get_articles med exakt k√§llnamn fr√•n listan

Exempel:
Anv√§ndare: "Visa artiklar fr√•n SVT Inrikes"
‚Üí Steg 1: list_sources() ‚Üí hittar "SVT Nyheter Inrikes"
‚Üí Steg 2: get_articles(source="SVT Nyheter Inrikes")

VIKTIGT: Gissa ALDRIG p√• k√§llnamn - lista alltid k√§llor f√∂rst n√§r du √§r os√§ker!"""


async def run_chat():
    """Run interactive chat agent."""
    _ = load_dotenv()

    db = Database()
    profile = ProfileManager(db=db)

    # Check API key
    api_key = os.getenv("ANTHROPIC_API_KEY")
    if not api_key:
        console.print("[red]Error: ANTHROPIC_API_KEY not found[/red]")
        console.print("\nThe Claude Agent SDK requires an Anthropic API key.")
        console.print("Get your API key from: https://console.anthropic.com/")
        console.print("Then add it to your .env file:")
        console.print("  ANTHROPIC_API_KEY=sk-ant-...")
        raise ValueError("ANTHROPIC_API_KEY not found")

    # Load model from config
    import json
    try:
        with open('config.json', 'r', encoding='utf-8') as f:
            config = json.load(f)
        model = config.get('claude_model', 'claude-haiku-4-5-20251001')
    except (FileNotFoundError, json.JSONDecodeError):
        model = 'claude-haiku-4-5-20251001'  # Default fallback

    console.print("\n[bold blue]ü§ñ Agent-driven Nyhetsl√§sare[/bold blue]\n")
    console.print("Chatten med AI-agenten om dina nyheter.")
    console.print("Agenten har tillg√•ng till alla systemverktyg och kan:")
    console.print("  - H√§mta och visa artiklar")
    console.print("  - Spara feedback och l√§ra fr√•n den")
    console.print("  - Uppdatera din profil automatiskt")
    console.print("  - Ge insikter och f√∂rslag")
    console.print("\n[dim]Skriv 'exit' f√∂r att avsluta[/dim]\n")

    # Create MCP server
    mcp_server = create_mcp_server()
    console.print(f"[green]‚úì[/green] Loaded {len(CHAT_TOOLS)} tools")

    # Setup options
    allowed_tools = [f"mcp__news_tools__{tool_name}" for tool_name in CHAT_TOOLS]

    # NVM-specific configuration
    subprocess_env = os.environ.copy()
    subprocess_env["PATH"] = f"/Users/mikaelsjovind/.nvm/versions/node/v22.15.1/bin:{subprocess_env.get('PATH', '')}"

    options = ClaudeAgentOptions(
        mcp_servers={"news_tools": mcp_server},
        allowed_tools=allowed_tools,
        system_prompt=get_system_prompt(profile),
        permission_mode='bypassPermissions',
        cli_path="/Users/mikaelsjovind/.nvm/versions/node/v22.15.1/bin/claude",
        env=subprocess_env,
        model=model
    )

    console.print("[dim]Anv√§nder Agent SDK med Claude Code CLI[/dim]\n")

    # Create client and run conversation
    async with ClaudeSDKClient(options=options) as client:
        # Startup routine
        startup_prompt = """K√∂r f√∂ljande startup-rutin:

1. Anv√§nd get_stats f√∂r att f√• totalt antal ol√§sta artiklar
2. Anv√§nd get_articles(read_status='unread', grouped=True, limit=1000) f√∂r att h√§mta ALLA ol√§sta artiklar grupperade i relevans-niv√•er

VIKTIGT OM get_articles:
- Kontrollera ALLTID att response inneh√•ller "success": true
- Om "success": false, logga felet och f√∂rs√∂k igen utan extra parametrar
- Anv√§nd alltid articles_by_tier n√§r grouped=True
- Fall tillbaka p√• articles-listan om gruppering misslyckas

Presentera resultatet med PROGRESSIV DETALJNIV√Ö:

**V√§lkomsth√§lsning:**
- V√§lkomna anv√§ndaren
- F√∂rklara att systemet AUTOMATISKT h√§mtar nya artiklar var 30:e minut
- Visa totalt antal ol√§sta och hur de f√∂rdelas i niv√•er

**H√ñG RELEVANS (‚â•0.7) - Fullst√§ndig presentation:**
F√∂r varje artikel i high_relevance:
  * üåü Emoji f√∂r att markera viktig artikel
  * üìä Emoji OM artikeln har has_deep_analysis=True (indikerar djupanalys tillg√§nglig)
  * Titel (bold)
  * Relevanspo√§ng (med f√§rg: gr√∂n om ‚â•0.8, gul annars)
  * K√§lla och publiceringsdatum
  * HELA sammanfattningen fr√•n summary-f√§ltet
  * OM has_deep_analysis=True: N√§mn att "Djupanalys tillg√§nglig - anv√§nd get_article(id) f√∂r att l√§sa"
  * L√§nk till artikeln
  * Article ID
  * Tom rad mellan artiklar

**MEDEL RELEVANS (0.4-0.7) - Kompakt presentation:**
F√∂r varje artikel i medium_relevance:
  * Titel, K√§lla, Relevans (p√• en rad)
  * INGEN sammanfattning (anv√§ndaren kan klicka l√§nken om intresserad)
  * L√§nk

**L√ÖG RELEVANS (<0.4) - Minimal presentation:**
Lista ALLA titlar och k√§llor i kompakt punktlista - INGA artiklar f√•r hoppas √∂ver!

**Avslutning:**
- F√∂rklara progressiv l√§sning: "H√∂grelevanta = l√§s nu, Medelrelevanta = k√§nnedom, L√•grelevanta = medvetenhet"
- Bekr√§fta att ALLA artiklar visades: "Visade alla X artiklar f√∂rdelade i tre niv√•er"
- Fr√•ga anv√§ndaren om de vill markera dessa artiklar som l√§sta
- F√∂resl√• n√§sta steg

ABSOLUT KRITISKT:
- Visa HELA summary-texten f√∂r h√∂grelevanta artiklar
- Anv√§nd olika formatering f√∂r att visuellt separera niv√•erna
- ALLA artiklar i ALLA tre grupper M√ÖSTE visas - INGA undantag!
- Relevance score styr ENDAST presentation (detaljniv√•), ALDRIG synlighet
- MARKERA INTE artiklarna som l√§sta automatiskt - fr√•ga anv√§ndaren f√∂rst!
- Om du inte visar ALLA artiklar bryter du anv√§ndarens f√∂rtroende!"""

        await client.query(startup_prompt)

        # Collect greeting
        response_text = []
        async for message in client.receive_response():
            if isinstance(message, AssistantMessage):
                for block in message.content:
                    if isinstance(block, TextBlock):
                        response_text.append(block.text)

        greeting = "\n".join(response_text)
        console.print(f"[cyan]Agent:[/cyan] {greeting}\n")

        # Conversation loop
        while True:
            try:
                console.print("[green]Du:[/green] ", end="")
                user_input = input().strip()

                if not user_input:
                    continue

                if user_input.lower() in ['exit', 'quit', 'avsluta', 'q']:
                    console.print("\n[yellow]Avslutar agent-l√§saren...[/yellow]")
                    break

                # Get agent response
                await client.query(user_input)

                response_text = []
                async for message in client.receive_response():
                    if isinstance(message, AssistantMessage):
                        for block in message.content:
                            if isinstance(block, TextBlock):
                                response_text.append(block.text)

                response = "\n".join(response_text)
                console.print(f"\n[cyan]Agent:[/cyan] {response}\n")

            except KeyboardInterrupt:
                console.print("\n\n[yellow]Avbruten[/yellow]")
                break
            except EOFError:
                console.print("\n\n[yellow]Avbruten[/yellow]")
                break
            except Exception as e:
                console.print(f"\n[red]Fel: {e}[/red]\n")
                import traceback
                traceback.print_exc()
                continue

    # Summary
    stats = TOOLS['get_stats']['function']({})
    console.print("\n[bold]Session Summary:[/bold]")
    if 'total_articles' in stats:
        console.print(f"  Total artiklar: {stats['total_articles']}")
        console.print(f"  Ol√§sta: {stats.get('unread_count', 0)}")


def main():
    """Main entry point."""
    try:
        asyncio.run(run_chat())
    except KeyboardInterrupt:
        console.print("\n\n[yellow]Avslutad[/yellow]")
    except Exception as e:
        console.print(f"\n[red]Fel: {e}[/red]")
        import traceback
        traceback.print_exc()


if __name__ == "__main__":
    main()
